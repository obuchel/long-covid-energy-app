{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Line}from'react-chartjs-2';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';import'./EnergyDashboard.css';// Register Chart.js components\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);function EnergyDashboard(){// State for user's energy data\nconst[energyData,setEnergyData]=useState({labels:['Mon','Tue','Wed','Thu','Fri','Sat','Sun'],datasets:[{label:'Energy Level',data:[70,65,75,60,80,75,65],borderColor:'rgb(75, 192, 192)',backgroundColor:'rgba(75, 192, 192, 0.5)',tension:0.4},{label:'Activity Level',data:[60,75,70,80,65,85,60],borderColor:'rgb(255, 99, 132)',backgroundColor:'rgba(255, 99, 132, 0.5)',tension:0.4}]});// State for recommendations\nconst[recommendations,setRecommendations]=useState({energyBudget:75,dietRecommendations:['Increase anti-inflammatory foods','Focus on protein with each meal','Stay hydrated (aim for 2.5L daily)'],exerciseRecommendations:['Light walking for 10-15 minutes','Gentle stretching in the morning','Keep heart rate below 110 BPM']});// State for symptom input\nconst[symptomInput,setSymptomInput]=useState({fatigue:3,pain:2,cognitiveIssues:4,sleepQuality:3});// Mock function to update recommendations based on new symptoms\nconst updateRecommendations=symptoms=>{// This would be replaced with your actual control loop algorithm\nconst newEnergyBudget=100-symptoms.fatigue*5-symptoms.pain*3-symptoms.cognitiveIssues*4+symptoms.sleepQuality*3;setRecommendations({...recommendations,energyBudget:Math.max(30,Math.min(100,newEnergyBudget))});};// Handle symptom slider changes\nconst handleSymptomChange=(symptom,value)=>{const newSymptoms={...symptomInput,[symptom]:parseInt(value)};setSymptomInput(newSymptoms);updateRecommendations(newSymptoms);};// Prepare the chart options\nconst chartOptions={responsive:true,plugins:{legend:{position:'top'},title:{display:true,text:'Weekly Energy & Activity Trends'}},scales:{y:{min:0,max:100,title:{display:true,text:'Level (%)'}}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"dashboard-title\",children:\"Long COVID Energy Management\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-panel\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"panel-title\",children:\"Current Energy Status\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"energy-display\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"energy-value\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"energy-number\",children:[recommendations.energyBudget,\"%\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"energy-label\",children:\"Available Energy\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",children:/*#__PURE__*/_jsx(Line,{options:chartOptions,data:energyData,height:80})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-panel\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"panel-title\",children:\"Update Your Symptoms\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"input-label\",children:\"Fatigue Level (1-5)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"1\",max:\"5\",value:symptomInput.fatigue,onChange:e=>handleSymptomChange('fatigue',e.target.value),className:\"slider-container\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"slider-labels\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Mild\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Severe\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"input-label\",children:\"Pain Level (1-5)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"1\",max:\"5\",value:symptomInput.pain,onChange:e=>handleSymptomChange('pain',e.target.value),className:\"slider-container\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"slider-labels\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"None\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Severe\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"input-label\",children:\"Cognitive Issues (1-5)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"1\",max:\"5\",value:symptomInput.cognitiveIssues,onChange:e=>handleSymptomChange('cognitiveIssues',e.target.value),className:\"slider-container\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"slider-labels\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Clear\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Foggy\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"input-label\",children:\"Sleep Quality (1-5)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"1\",max:\"5\",value:symptomInput.sleepQuality,onChange:e=>handleSymptomChange('sleepQuality',e.target.value),className:\"slider-container\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"slider-labels\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Poor\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Great\"})]})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"recommendations-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"diet-panel\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"panel-title\",children:\"Diet Recommendations\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"recommendation-list\",children:recommendations.dietRecommendations.map((rec,idx)=>/*#__PURE__*/_jsxs(\"li\",{className:\"recommendation-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"bullet green-bullet\",children:\"\\u2022\"}),rec]},idx))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"exercise-panel\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"panel-title\",children:\"Exercise Recommendations\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"recommendation-list\",children:recommendations.exerciseRecommendations.map((rec,idx)=>/*#__PURE__*/_jsxs(\"li\",{className:\"recommendation-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"bullet purple-bullet\",children:\"\\u2022\"}),rec]},idx))})]})]})]});}export default EnergyDashboard;","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsx","_jsx","jsxs","_jsxs","register","EnergyDashboard","energyData","setEnergyData","labels","datasets","label","data","borderColor","backgroundColor","tension","recommendations","setRecommendations","energyBudget","dietRecommendations","exerciseRecommendations","symptomInput","setSymptomInput","fatigue","pain","cognitiveIssues","sleepQuality","updateRecommendations","symptoms","newEnergyBudget","Math","max","min","handleSymptomChange","symptom","value","newSymptoms","parseInt","chartOptions","responsive","plugins","legend","position","title","display","text","scales","y","className","children","options","height","type","onChange","e","target","map","rec","idx"],"sources":["/Users/necsi/Documents/GitHub/long-covid-energy-app/src/components/EnergyDashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport './EnergyDashboard.css';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nfunction EnergyDashboard() {\n  // State for user's energy data\n  const [energyData, setEnergyData] = useState({\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    datasets: [\n      {\n        label: 'Energy Level',\n        data: [70, 65, 75, 60, 80, 75, 65],\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.5)',\n        tension: 0.4,\n      },\n      {\n        label: 'Activity Level',\n        data: [60, 75, 70, 80, 65, 85, 60],\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\n        tension: 0.4,\n      },\n    ],\n  });\n\n  // State for recommendations\n  const [recommendations, setRecommendations] = useState({\n    energyBudget: 75,\n    dietRecommendations: [\n      'Increase anti-inflammatory foods',\n      'Focus on protein with each meal',\n      'Stay hydrated (aim for 2.5L daily)',\n    ],\n    exerciseRecommendations: [\n      'Light walking for 10-15 minutes',\n      'Gentle stretching in the morning',\n      'Keep heart rate below 110 BPM',\n    ],\n  });\n\n  // State for symptom input\n  const [symptomInput, setSymptomInput] = useState({\n    fatigue: 3,\n    pain: 2,\n    cognitiveIssues: 4,\n    sleepQuality: 3,\n  });\n\n  // Mock function to update recommendations based on new symptoms\n  const updateRecommendations = (symptoms) => {\n    // This would be replaced with your actual control loop algorithm\n    const newEnergyBudget = \n      100 - (symptoms.fatigue * 5) - \n      (symptoms.pain * 3) - \n      (symptoms.cognitiveIssues * 4) + \n      (symptoms.sleepQuality * 3);\n    \n    setRecommendations({\n      ...recommendations,\n      energyBudget: Math.max(30, Math.min(100, newEnergyBudget)),\n    });\n  };\n\n  // Handle symptom slider changes\n  const handleSymptomChange = (symptom, value) => {\n    const newSymptoms = { ...symptomInput, [symptom]: parseInt(value) };\n    setSymptomInput(newSymptoms);\n    updateRecommendations(newSymptoms);\n  };\n\n  // Prepare the chart options\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Weekly Energy & Activity Trends',\n      },\n    },\n    scales: {\n      y: {\n        min: 0,\n        max: 100,\n        title: {\n          display: true,\n          text: 'Level (%)'\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"dashboard-title\">Long COVID Energy Management</h1>\n      \n      {/* Energy Status Section */}\n      <div className=\"status-panel\">\n        <h2 className=\"panel-title\">Current Energy Status</h2>\n        <div className=\"energy-display\">\n          <div className=\"energy-value\">\n            <div className=\"energy-number\">\n              {recommendations.energyBudget}%\n            </div>\n            <div className=\"energy-label\">Available Energy</div>\n          </div>\n          \n          <div className=\"chart-container\">\n            <Line options={chartOptions} data={energyData} height={80} />\n          </div>\n        </div>\n      </div>\n      \n      {/* Symptom Input Section */}\n      <div className=\"input-panel\">\n        <h2 className=\"panel-title\">Update Your Symptoms</h2>\n        <div className=\"input-grid\">\n          <div>\n            <label className=\"input-label\">\n              Fatigue Level (1-5)\n            </label>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"5\"\n              value={symptomInput.fatigue}\n              onChange={(e) => handleSymptomChange('fatigue', e.target.value)}\n              className=\"slider-container\"\n            />\n            <div className=\"slider-labels\">\n              <span>Mild</span>\n              <span>Severe</span>\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"input-label\">\n              Pain Level (1-5)\n            </label>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"5\"\n              value={symptomInput.pain}\n              onChange={(e) => handleSymptomChange('pain', e.target.value)}\n              className=\"slider-container\"\n            />\n            <div className=\"slider-labels\">\n              <span>None</span>\n              <span>Severe</span>\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"input-label\">\n              Cognitive Issues (1-5)\n            </label>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"5\"\n              value={symptomInput.cognitiveIssues}\n              onChange={(e) => handleSymptomChange('cognitiveIssues', e.target.value)}\n              className=\"slider-container\"\n            />\n            <div className=\"slider-labels\">\n              <span>Clear</span>\n              <span>Foggy</span>\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"input-label\">\n              Sleep Quality (1-5)\n            </label>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"5\"\n              value={symptomInput.sleepQuality}\n              onChange={(e) => handleSymptomChange('sleepQuality', e.target.value)}\n              className=\"slider-container\"\n            />\n            <div className=\"slider-labels\">\n              <span>Poor</span>\n              <span>Great</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Recommendations Section */}\n      <div className=\"recommendations-grid\">\n        <div className=\"diet-panel\">\n          <h2 className=\"panel-title\">Diet Recommendations</h2>\n          <ul className=\"recommendation-list\">\n            {recommendations.dietRecommendations.map((rec, idx) => (\n              <li key={idx} className=\"recommendation-item\">\n                <span className=\"bullet green-bullet\">•</span>\n                {rec}\n              </li>\n            ))}\n          </ul>\n        </div>\n        \n        <div className=\"exercise-panel\">\n          <h2 className=\"panel-title\">Exercise Recommendations</h2>\n          <ul className=\"recommendation-list\">\n            {recommendations.exerciseRecommendations.map((rec, idx) => (\n              <li key={idx} className=\"recommendation-item\">\n                <span className=\"bullet purple-bullet\">•</span>\n                {rec}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EnergyDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}