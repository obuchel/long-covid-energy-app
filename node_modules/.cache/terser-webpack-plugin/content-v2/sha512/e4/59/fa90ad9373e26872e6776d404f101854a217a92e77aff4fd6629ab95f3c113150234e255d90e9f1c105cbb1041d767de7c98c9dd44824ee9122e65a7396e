{"map":"{\"version\":3,\"sources\":[\"/Users/necsi/Documents/GitHub/long-covid-energy-app/src/components/EnergyDashboard.jsx\",\"/Users/necsi/Documents/GitHub/long-covid-energy-app/src/App.js\",\"/Users/necsi/Documents/GitHub/long-covid-energy-app/src/reportWebVitals.js\",\"/Users/necsi/Documents/GitHub/long-covid-energy-app/src/index.js\"],\"names\":[\"ChartJS\",\"register\",\"CategoryScale\",\"LinearScale\",\"PointElement\",\"LineElement\",\"Title\",\"Tooltip\",\"Legend\",\"EnergyDashboard\",\"energyData\",\"setEnergyData\",\"useState\",\"labels\",\"datasets\",\"label\",\"data\",\"borderColor\",\"backgroundColor\",\"tension\",\"recommendations\",\"setRecommendations\",\"energyBudget\",\"dietRecommendations\",\"exerciseRecommendations\",\"symptomInput\",\"setSymptomInput\",\"fatigue\",\"pain\",\"cognitiveIssues\",\"sleepQuality\",\"handleSymptomChange\",\"symptom\",\"value\",\"newSymptoms\",\"[object Object]\",\"parseInt\",\"symptoms\",\"newEnergyBudget\",\"Math\",\"max\",\"min\",\"updateRecommendations\",\"React\",\"createElement\",\"className\",\"Line\",\"options\",\"responsive\",\"plugins\",\"legend\",\"position\",\"title\",\"display\",\"text\",\"scales\",\"y\",\"height\",\"type\",\"onChange\",\"e\",\"target\",\"map\",\"rec\",\"idx\",\"key\",\"App\",\"reportWebVitals\",\"onPerfEntry\",\"Function\",\"__webpack_require__\",\"then\",\"bind\",\"_ref\",\"getCLS\",\"getFID\",\"getFCP\",\"getLCP\",\"getTTFB\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState, useEffect } from 'react';\\nimport { Line } from 'react-chartjs-2';\\nimport {\\n  Chart as ChartJS,\\n  CategoryScale,\\n  LinearScale,\\n  PointElement,\\n  LineElement,\\n  Title,\\n  Tooltip,\\n  Legend,\\n} from 'chart.js';\\nimport './EnergyDashboard.css';\\n\\n// Register Chart.js components\\nChartJS.register(\\n  CategoryScale,\\n  LinearScale,\\n  PointElement,\\n  LineElement,\\n  Title,\\n  Tooltip,\\n  Legend\\n);\\n\\nfunction EnergyDashboard() {\\n  // State for user's energy data\\n  const [energyData, setEnergyData] = useState({\\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\\n    datasets: [\\n      {\\n        label: 'Energy Level',\\n        data: [70, 65, 75, 60, 80, 75, 65],\\n        borderColor: 'rgb(75, 192, 192)',\\n        backgroundColor: 'rgba(75, 192, 192, 0.5)',\\n        tension: 0.4,\\n      },\\n      {\\n        label: 'Activity Level',\\n        data: [60, 75, 70, 80, 65, 85, 60],\\n        borderColor: 'rgb(255, 99, 132)',\\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\\n        tension: 0.4,\\n      },\\n    ],\\n  });\\n\\n  // State for recommendations\\n  const [recommendations, setRecommendations] = useState({\\n    energyBudget: 75,\\n    dietRecommendations: [\\n      'Increase anti-inflammatory foods',\\n      'Focus on protein with each meal',\\n      'Stay hydrated (aim for 2.5L daily)',\\n    ],\\n    exerciseRecommendations: [\\n      'Light walking for 10-15 minutes',\\n      'Gentle stretching in the morning',\\n      'Keep heart rate below 110 BPM',\\n    ],\\n  });\\n\\n  // State for symptom input\\n  const [symptomInput, setSymptomInput] = useState({\\n    fatigue: 3,\\n    pain: 2,\\n    cognitiveIssues: 4,\\n    sleepQuality: 3,\\n  });\\n\\n  // Mock function to update recommendations based on new symptoms\\n  const updateRecommendations = (symptoms) => {\\n    // This would be replaced with your actual control loop algorithm\\n    const newEnergyBudget = \\n      100 - (symptoms.fatigue * 5) - \\n      (symptoms.pain * 3) - \\n      (symptoms.cognitiveIssues * 4) + \\n      (symptoms.sleepQuality * 3);\\n    \\n    setRecommendations({\\n      ...recommendations,\\n      energyBudget: Math.max(30, Math.min(100, newEnergyBudget)),\\n    });\\n  };\\n\\n  // Handle symptom slider changes\\n  const handleSymptomChange = (symptom, value) => {\\n    const newSymptoms = { ...symptomInput, [symptom]: parseInt(value) };\\n    setSymptomInput(newSymptoms);\\n    updateRecommendations(newSymptoms);\\n  };\\n\\n  // Prepare the chart options\\n  const chartOptions = {\\n    responsive: true,\\n    plugins: {\\n      legend: {\\n        position: 'top',\\n      },\\n      title: {\\n        display: true,\\n        text: 'Weekly Energy & Activity Trends',\\n      },\\n    },\\n    scales: {\\n      y: {\\n        min: 0,\\n        max: 100,\\n        title: {\\n          display: true,\\n          text: 'Level (%)'\\n        }\\n      }\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"container\\\">\\n      <h1 className=\\\"dashboard-title\\\">Long COVID Energy Management</h1>\\n      \\n      {/* Energy Status Section */}\\n      <div className=\\\"status-panel\\\">\\n        <h2 className=\\\"panel-title\\\">Current Energy Status</h2>\\n        <div className=\\\"energy-display\\\">\\n          <div className=\\\"energy-value\\\">\\n            <div className=\\\"energy-number\\\">\\n              {recommendations.energyBudget}%\\n            </div>\\n            <div className=\\\"energy-label\\\">Available Energy</div>\\n          </div>\\n          \\n          <div className=\\\"chart-container\\\">\\n            <Line options={chartOptions} data={energyData} height={80} />\\n          </div>\\n        </div>\\n      </div>\\n      \\n      {/* Symptom Input Section */}\\n      <div className=\\\"input-panel\\\">\\n        <h2 className=\\\"panel-title\\\">Update Your Symptoms</h2>\\n        <div className=\\\"input-grid\\\">\\n          <div>\\n            <label className=\\\"input-label\\\">\\n              Fatigue Level (1-5)\\n            </label>\\n            <input\\n              type=\\\"range\\\"\\n              min=\\\"1\\\"\\n              max=\\\"5\\\"\\n              value={symptomInput.fatigue}\\n              onChange={(e) => handleSymptomChange('fatigue', e.target.value)}\\n              className=\\\"slider-container\\\"\\n            />\\n            <div className=\\\"slider-labels\\\">\\n              <span>Mild</span>\\n              <span>Severe</span>\\n            </div>\\n          </div>\\n          \\n          <div>\\n            <label className=\\\"input-label\\\">\\n              Pain Level (1-5)\\n            </label>\\n            <input\\n              type=\\\"range\\\"\\n              min=\\\"1\\\"\\n              max=\\\"5\\\"\\n              value={symptomInput.pain}\\n              onChange={(e) => handleSymptomChange('pain', e.target.value)}\\n              className=\\\"slider-container\\\"\\n            />\\n            <div className=\\\"slider-labels\\\">\\n              <span>None</span>\\n              <span>Severe</span>\\n            </div>\\n          </div>\\n          \\n          <div>\\n            <label className=\\\"input-label\\\">\\n              Cognitive Issues (1-5)\\n            </label>\\n            <input\\n              type=\\\"range\\\"\\n              min=\\\"1\\\"\\n              max=\\\"5\\\"\\n              value={symptomInput.cognitiveIssues}\\n              onChange={(e) => handleSymptomChange('cognitiveIssues', e.target.value)}\\n              className=\\\"slider-container\\\"\\n            />\\n            <div className=\\\"slider-labels\\\">\\n              <span>Clear</span>\\n              <span>Foggy</span>\\n            </div>\\n          </div>\\n          \\n          <div>\\n            <label className=\\\"input-label\\\">\\n              Sleep Quality (1-5)\\n            </label>\\n            <input\\n              type=\\\"range\\\"\\n              min=\\\"1\\\"\\n              max=\\\"5\\\"\\n              value={symptomInput.sleepQuality}\\n              onChange={(e) => handleSymptomChange('sleepQuality', e.target.value)}\\n              className=\\\"slider-container\\\"\\n            />\\n            <div className=\\\"slider-labels\\\">\\n              <span>Poor</span>\\n              <span>Great</span>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      \\n      {/* Recommendations Section */}\\n      <div className=\\\"recommendations-grid\\\">\\n        <div className=\\\"diet-panel\\\">\\n          <h2 className=\\\"panel-title\\\">Diet Recommendations</h2>\\n          <ul className=\\\"recommendation-list\\\">\\n            {recommendations.dietRecommendations.map((rec, idx) => (\\n              <li key={idx} className=\\\"recommendation-item\\\">\\n                <span className=\\\"bullet green-bullet\\\">•</span>\\n                {rec}\\n              </li>\\n            ))}\\n          </ul>\\n        </div>\\n        \\n        <div className=\\\"exercise-panel\\\">\\n          <h2 className=\\\"panel-title\\\">Exercise Recommendations</h2>\\n          <ul className=\\\"recommendation-list\\\">\\n            {recommendations.exerciseRecommendations.map((rec, idx) => (\\n              <li key={idx} className=\\\"recommendation-item\\\">\\n                <span className=\\\"bullet purple-bullet\\\">•</span>\\n                {rec}\\n              </li>\\n            ))}\\n          </ul>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default EnergyDashboard;\\n\",\"import React from 'react';\\nimport EnergyDashboard from './components/EnergyDashboard';\\nimport './App.css';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <EnergyDashboard />\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"const reportWebVitals = onPerfEntry => {\\n  if (onPerfEntry && onPerfEntry instanceof Function) {\\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\\n      getCLS(onPerfEntry);\\n      getFID(onPerfEntry);\\n      getFCP(onPerfEntry);\\n      getLCP(onPerfEntry);\\n      getTTFB(onPerfEntry);\\n    });\\n  }\\n};\\n\\nexport default reportWebVitals;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport App from './App';\\nimport reportWebVitals from './reportWebVitals';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n// If you want to start measuring performance in your app, pass a function\\n// to log results (for example: reportWebVitals(console.log))\\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\\nreportWebVitals();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,a,t){},16:function(e,a,t){},17:function(e,a,t){},18:function(e,a,t){\"use strict\";t.r(a);var n=t(0),l=t.n(n),s=t(4),i=t.n(s),r=(t(15),t(5)),c=t(1);t(16);c.Chart.register(c.CategoryScale,c.LinearScale,c.PointElement,c.LineElement,c.Title,c.Tooltip,c.Legend);var m=function(){const[e,a]=Object(n.useState)({labels:[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"],datasets:[{label:\"Energy Level\",data:[70,65,75,60,80,75,65],borderColor:\"rgb(75, 192, 192)\",backgroundColor:\"rgba(75, 192, 192, 0.5)\",tension:.4},{label:\"Activity Level\",data:[60,75,70,80,65,85,60],borderColor:\"rgb(255, 99, 132)\",backgroundColor:\"rgba(255, 99, 132, 0.5)\",tension:.4}]}),[t,s]=Object(n.useState)({energyBudget:75,dietRecommendations:[\"Increase anti-inflammatory foods\",\"Focus on protein with each meal\",\"Stay hydrated (aim for 2.5L daily)\"],exerciseRecommendations:[\"Light walking for 10-15 minutes\",\"Gentle stretching in the morning\",\"Keep heart rate below 110 BPM\"]}),[i,c]=Object(n.useState)({fatigue:3,pain:2,cognitiveIssues:4,sleepQuality:3}),m=(e,a)=>{const n={...i,[e]:parseInt(a)};c(n),(e=>{const a=100-5*e.fatigue-3*e.pain-4*e.cognitiveIssues+3*e.sleepQuality;s({...t,energyBudget:Math.max(30,Math.min(100,a))})})(n)};return l.a.createElement(\"div\",{className:\"container\"},l.a.createElement(\"h1\",{className:\"dashboard-title\"},\"Long COVID Energy Management\"),l.a.createElement(\"div\",{className:\"status-panel\"},l.a.createElement(\"h2\",{className:\"panel-title\"},\"Current Energy Status\"),l.a.createElement(\"div\",{className:\"energy-display\"},l.a.createElement(\"div\",{className:\"energy-value\"},l.a.createElement(\"div\",{className:\"energy-number\"},t.energyBudget,\"%\"),l.a.createElement(\"div\",{className:\"energy-label\"},\"Available Energy\")),l.a.createElement(\"div\",{className:\"chart-container\"},l.a.createElement(r.a,{options:{responsive:!0,plugins:{legend:{position:\"top\"},title:{display:!0,text:\"Weekly Energy & Activity Trends\"}},scales:{y:{min:0,max:100,title:{display:!0,text:\"Level (%)\"}}}},data:e,height:80})))),l.a.createElement(\"div\",{className:\"input-panel\"},l.a.createElement(\"h2\",{className:\"panel-title\"},\"Update Your Symptoms\"),l.a.createElement(\"div\",{className:\"input-grid\"},l.a.createElement(\"div\",null,l.a.createElement(\"label\",{className:\"input-label\"},\"Fatigue Level (1-5)\"),l.a.createElement(\"input\",{type:\"range\",min:\"1\",max:\"5\",value:i.fatigue,onChange:e=>m(\"fatigue\",e.target.value),className:\"slider-container\"}),l.a.createElement(\"div\",{className:\"slider-labels\"},l.a.createElement(\"span\",null,\"Mild\"),l.a.createElement(\"span\",null,\"Severe\"))),l.a.createElement(\"div\",null,l.a.createElement(\"label\",{className:\"input-label\"},\"Pain Level (1-5)\"),l.a.createElement(\"input\",{type:\"range\",min:\"1\",max:\"5\",value:i.pain,onChange:e=>m(\"pain\",e.target.value),className:\"slider-container\"}),l.a.createElement(\"div\",{className:\"slider-labels\"},l.a.createElement(\"span\",null,\"None\"),l.a.createElement(\"span\",null,\"Severe\"))),l.a.createElement(\"div\",null,l.a.createElement(\"label\",{className:\"input-label\"},\"Cognitive Issues (1-5)\"),l.a.createElement(\"input\",{type:\"range\",min:\"1\",max:\"5\",value:i.cognitiveIssues,onChange:e=>m(\"cognitiveIssues\",e.target.value),className:\"slider-container\"}),l.a.createElement(\"div\",{className:\"slider-labels\"},l.a.createElement(\"span\",null,\"Clear\"),l.a.createElement(\"span\",null,\"Foggy\"))),l.a.createElement(\"div\",null,l.a.createElement(\"label\",{className:\"input-label\"},\"Sleep Quality (1-5)\"),l.a.createElement(\"input\",{type:\"range\",min:\"1\",max:\"5\",value:i.sleepQuality,onChange:e=>m(\"sleepQuality\",e.target.value),className:\"slider-container\"}),l.a.createElement(\"div\",{className:\"slider-labels\"},l.a.createElement(\"span\",null,\"Poor\"),l.a.createElement(\"span\",null,\"Great\"))))),l.a.createElement(\"div\",{className:\"recommendations-grid\"},l.a.createElement(\"div\",{className:\"diet-panel\"},l.a.createElement(\"h2\",{className:\"panel-title\"},\"Diet Recommendations\"),l.a.createElement(\"ul\",{className:\"recommendation-list\"},t.dietRecommendations.map((e,a)=>l.a.createElement(\"li\",{key:a,className:\"recommendation-item\"},l.a.createElement(\"span\",{className:\"bullet green-bullet\"},\"\\u2022\"),e)))),l.a.createElement(\"div\",{className:\"exercise-panel\"},l.a.createElement(\"h2\",{className:\"panel-title\"},\"Exercise Recommendations\"),l.a.createElement(\"ul\",{className:\"recommendation-list\"},t.exerciseRecommendations.map((e,a)=>l.a.createElement(\"li\",{key:a,className:\"recommendation-item\"},l.a.createElement(\"span\",{className:\"bullet purple-bullet\"},\"\\u2022\"),e))))))};t(17);var o=function(){return l.a.createElement(\"div\",{className:\"App\"},l.a.createElement(m,null))};var u=e=>{e&&e instanceof Function&&t.e(3).then(t.bind(null,19)).then(a=>{let{getCLS:t,getFID:n,getFCP:l,getLCP:s,getTTFB:i}=a;t(e),n(e),l(e),s(e),i(e)})};i.a.createRoot(document.getElementById(\"root\")).render(l.a.createElement(l.a.StrictMode,null,l.a.createElement(o,null))),u()},6:function(e,a,t){e.exports=t(18)}},[[6,1,2]]]);","extractedComments":[]}